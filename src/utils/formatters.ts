import { StopsListResponse, RoutesListResponse, TrassaResponse } from '@ngtbot/types';
import { TRANSPORT_TYPE_EMOJIS, TRANSPORT_TYPE_NAMES, TRANSPORT_TYPE_FULL_NAMES, LIMITS, MESSAGES } from '@ngtbot/constants';

export class Formatters {
  static getTransportTypeEmoji(type: number): string {
    const typeStr = type.toString();
    return TRANSPORT_TYPE_EMOJIS[typeStr] || 'üöç'; // Default transport
  }

  static getTransportTypeName(type: number): string {
    return TRANSPORT_TYPE_NAMES[type] || '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç';
  }

  static getTransportTypeFullName(type: number): string {
    return TRANSPORT_TYPE_FULL_NAMES[type] || 'üöç –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç';
  }

  static formatStopsList(stops: StopsListResponse['data'], showPlatforms: boolean = false): string {
    if (stops.length === 0) {
      return MESSAGES.NO_STOPS_FOUND;
    }

    let message = `–ù–∞–π–¥–µ–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: ${stops.length}\n\n`;

    stops.slice(0, LIMITS.MAX_STOPS_DISPLAY).forEach((stop, index) => {
      message += `${index + 1}. üöè ${stop.title} #${stop.id}\n`;
      if (showPlatforms) {
        stop.platforms.forEach((platform, pIndex) => {
          message += `   ${String.fromCharCode(97 + pIndex)}) –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ #${platform.id}\n`;
        });
      }
      message += '\n';
    });

    if (stops.length > LIMITS.MAX_STOPS_DISPLAY) {
      message += '\n...–∏ –µ—â—ë ' + (stops.length - LIMITS.MAX_STOPS_DISPLAY) + ' –æ—Å—Ç–∞–Ω–æ–≤–æ–∫';
    }

    return message;
  }

  static formatRouteInfo(route: RoutesListResponse['data'][0]): string {
    const transportType = this.getTransportTypeFullName(route.transport_type);
    return `${transportType}\n` +
      `–ú–∞—Ä—à—Ä—É—Ç: ${route.title}\n` +
      `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${route.name_begin} - ${route.name_end}\n` +
      `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞: ${route.fare} ‚ÇΩ`;
  }

  static formatRoutesSummary(routes: RoutesListResponse['data']): string {
    console.log(`[DEBUG] Formatting routes summary. Total routes: ${routes.length}`);

    if (!routes || routes.length === 0) {
      return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /refresh –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.';
    }

    // Debug: show first few routes to understand data structure
    console.log('[DEBUG] First 3 routes:', routes.slice(0, 3).map(r => ({
      id: r.id,
      title: r.title,
      type_transport: r.transport_type,
      type_transport_type: typeof r.transport_type
    })));

    const transportTypes = [1, 2, 3, 8] as const;
    let message = '–¢–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤:\n\n';
    let hasAnyRoutes = false;

    for (const type of transportTypes) {
      // Filter by transport type
      const typeRoutes = routes.filter(r => r.transport_type === type);
      console.log(`[DEBUG] Type ${type}: ${typeRoutes.length} routes`);

      if (typeRoutes.length > 0) {
        hasAnyRoutes = true;
        const routeNumbers = typeRoutes
          .map(r => r.title)
          .sort((a, b) => Number(a) - Number(b))
          .join(', ');

        message += `${this.getTransportTypeFullName(type)}: ${typeRoutes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤\n`;
        message += `–ù–æ–º–µ—Ä–∞: ${routeNumbers}\n\n`;
      }
    }

    if (!hasAnyRoutes) {
      return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /refresh –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.';
    }

    message += '\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/route <–Ω–æ–º–µ—Ä>';
    return message;
  }

  static formatTimeString(minutes: number): string {
    return minutes === 0 ? '—Å–µ–π—á–∞—Å' : `${minutes} –º–∏–Ω`;
  }

  static formatTimeArray(minutes: number[]): string {
    const sortedMinutes = minutes.sort((a, b) => a - b);
    const uniqueMinutes = [...new Set(sortedMinutes)].slice(0, LIMITS.MAX_FORECAST_TIMES);
    let timeStr = uniqueMinutes.map(m => this.formatTimeString(m)).join(', ');

    // Remove redundant "–º–∏–Ω" if "—Å–µ–π—á–∞—Å" is present
    if (timeStr.includes('—Å–µ–π—á–∞—Å') && timeStr.includes('–º–∏–Ω')) {
      timeStr = timeStr.replace('—Å–µ–π—á–∞—Å, ', '—Å–µ–π—á–∞—Å, ').replace(', —Å–µ–π—á–∞—Å', '');
    }

    return timeStr;
  }
}
