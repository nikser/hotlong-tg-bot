import { Telegraf, Context } from 'telegraf';
import { Update } from 'telegraf/typings/core/types/typegram';
import axios from 'axios';
import { config } from './config';
import { StopsListResponse, RoutesListResponse, ForecastResponse } from './types';
import { FileCache } from './cache';

// Create bot instance
const bot = new Telegraf(config.TELEGRAM_TOKEN);

// Initialize caches
const stopsCache = new FileCache<StopsListResponse['data']>('stops.json', 1);
const routesCache = new FileCache<RoutesListResponse['data']>('routes.json', 1);

// Store for all data
let allStops: StopsListResponse['data'] = [];
let allRoutes: RoutesListResponse['data'] = [];

// Function to load all stops
async function loadAllStops() {
  try {
    const cachedStops = stopsCache.load();
    if (cachedStops) {
      allStops = cachedStops;
      console.log('Loaded stops from cache');
      return;
    }

    const response = await axios.get<StopsListResponse>(
      config.STOPS_LIST_ENDPOINT,
      {
        params: {
          v: '0.3',
          key: config.NSKGORTRANS_API_TOKEN,
          format: 'json'
        }
      }
    );
    allStops = response.data.data;
    stopsCache.save(allStops);
    console.log(`Loaded ${allStops.length} stops from API and cached`);
  } catch (error) {
    console.error('Error loading stops:', error);
  }
}

// Function to load all routes
async function loadAllRoutes() {
  try {
    const cachedRoutes = routesCache.load();
    if (cachedRoutes) {
      allRoutes = cachedRoutes;
      console.log('Loaded routes from cache');
      return;
    }

    const response = await axios.get<RoutesListResponse>(
      config.ROUTES_LIST_ENDPOINT,
      {
        params: {
          v: '0.3',
          key: config.NSKGORTRANS_API_TOKEN,
          format: 'json'
        }
      }
    );
    allRoutes = response.data.data;
    routesCache.save(allRoutes);
    console.log(`Loaded ${allRoutes.length} routes from API and cached`);
  } catch (error) {
    console.error('Error loading routes:', error);
  }
}

// Function to search stops by name
function searchStops(query: string) {
  const normalizedQuery = query.toLowerCase().trim();
  const words = normalizedQuery.split(/\s+/);
  
  return allStops.filter(stop => {
    const stopTitle = stop.title.toLowerCase();
    // Check if all words from the query are present in the stop title
    return words.every(word => stopTitle.includes(word));
  });
}

// Function to get route info
function getRouteInfo(routeId: string): string {
  const route = allRoutes.find(r => r.id === routeId);
  if (!route) return '';
  
  const transportTypes: Record<string, string> = {
    '1': 'üöå',
    '2': 'üöé',
    '3': 'üöä',
    '8': 'üöê'
  };

  const emoji = transportTypes[route.type_transport] || 'üöç';
  return `${emoji} ${route.title} (${route.name_begin} - ${route.name_end})`;
}

// Format stops list message
function formatStopsList(stops: StopsListResponse['data'], showPlatforms: boolean = false): string {
  if (stops.length === 0) {
    return '–û—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.';
  }

  let message = `–ù–∞–π–¥–µ–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: ${stops.length}\n\n`;
  
  stops.slice(0, 10).forEach((stop, index) => {
    message += `${index + 1}. üöè ${stop.title} (ID: ${stop.id})\n`;
    if (showPlatforms) {
      stop.platforms.forEach((platform, pIndex) => {
        message += `   ${String.fromCharCode(97 + pIndex)}) –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ${platform.id}\n`;
      });
    }
    message += '\n';
  });

  if (stops.length > 10) {
    message += '\n...–∏ –µ—â—ë ' + (stops.length - 10) + ' –æ—Å—Ç–∞–Ω–æ–≤–æ–∫';
  }

  return message;
}

// Start command handler
bot.command('start', async (ctx) => {
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–∏–±—ã—Ç–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.\n\n' +
    '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/search <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n' +
    '/stop <id> - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ ID –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n' +
    '/routes - —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n' +
    '/route <–Ω–æ–º–µ—Ä> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ\n' +
    '/refresh - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n' +
    '–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.'
  );
});

// Help command handler
bot.command('help', async (ctx) => {
  await ctx.reply(
    '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n' +
    '1. –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫:\n' +
    '   /search <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n' +
    '   –ü—Ä–∏–º–µ—Ä: /search –ø–ª–æ—â–∞–¥—å –ª–µ–Ω–∏–Ω–∞\n\n' +
    '2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞:\n' +
    '   /stop <id> - –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ ID –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n' +
    '   –ü—Ä–∏–º–µ—Ä: /stop 142\n\n' +
    '3. –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤:\n' +
    '   /routes - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤\n\n' +
    '4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:\n' +
    '   /refresh - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤'
  );
});

// Routes command handler - show summary
bot.command('routes', async (ctx) => {
  const transportTypes = ['1', '2', '3', '8'] as const;
  const typeNames: Record<typeof transportTypes[number], string> = {
    '1': '–ê–≤—Ç–æ–±—É—Å—ã',
    '2': '–¢—Ä–æ–ª–ª–µ–π–±—É—Å—ã',
    '3': '–¢—Ä–∞–º–≤–∞–∏',
    '8': '–ú–∞—Ä—à—Ä—É—Ç–∫–∏'
  };

  let message = '–¢–∏–ø—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤:\n\n';

  for (const type of transportTypes) {
    const routes = allRoutes.filter(r => r.type_transport === type);
    if (routes.length > 0) {
      const routeNumbers = routes
        .map(r => r.title)
        .sort((a, b) => Number(a) - Number(b))
        .join(', ');
      
      message += `${typeNames[type]}: ${routes.length} –º–∞—Ä—à—Ä—É—Ç–æ–≤\n`;
      message += `–ù–æ–º–µ—Ä–∞: ${routeNumbers}\n\n`;
    }
  }

  message += '\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/route <–Ω–æ–º–µ—Ä>';
  await ctx.reply(message);
});

// Single route command handler
bot.command('route', async (ctx) => {
  const routeNumber = ctx.message.text.replace('/route', '').trim();
  
  if (!routeNumber) {
    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞.\n' +
      '–ü—Ä–∏–º–µ—Ä: /route 13'
    );
    return;
  }

  const matchingRoutes = allRoutes.filter(r => r.title === routeNumber);

  if (matchingRoutes.length === 0) {
    await ctx.reply('–ú–∞—Ä—à—Ä—É—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }

  let message = `–ù–∞–π–¥–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º ${routeNumber}:\n\n`;

  matchingRoutes.forEach(route => {
    const transportTypes: Record<string, string> = {
      '1': 'üöå –ê–≤—Ç–æ–±—É—Å',
      '2': 'üöé –¢—Ä–æ–ª–ª–µ–π–±—É—Å',
      '3': 'üöä –¢—Ä–∞–º–≤–∞–π',
      '8': 'üöê –ú–∞—Ä—à—Ä—É—Ç–∫–∞'
    };

    const transportType = transportTypes[route.type_transport] || 'üöç –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç';
    message += `${transportType}\n`;
    message += `–ú–∞—Ä—à—Ä—É—Ç: ${route.title}\n`;
    message += `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${route.name_begin} - ${route.name_end}\n`;
    message += `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∑–¥–∞: ${route.fare} ‚ÇΩ\n\n`;
  });

  await ctx.reply(message);
});

// Stop command handler
bot.command('stop', async (ctx) => {
  const stopId = ctx.message.text.replace('/stop', '').trim();
  
  if (!stopId) {
    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n' +
      '–ü—Ä–∏–º–µ—Ä: /stop 142'
    );
    return;
  }

  const stop = allStops.find(s => s.id === stopId);
  if (!stop) {
    await ctx.reply('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }

  try {
    let fullResponse = `üöè ${stop.title} (ID: ${stop.id})\n\n`;
    
    // Get forecast for each platform
    for (const platform of stop.platforms) {
      const forecastResponse = await axios.get<ForecastResponse>(
        `${config.FORECAST_ENDPOINT}/${platform.id}`,
        {
          params: {
            v: '0.5',
            key: config.NSKGORTRANS_API_TOKEN,
            format: 'json'
          }
        }
      );

      if (forecastResponse.data.data && forecastResponse.data.data.length > 0) {
        fullResponse += `–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ${platform.id}:\n`;
        for (const transport of forecastResponse.data.data) {
          const route = allRoutes.find(r => r.id === transport.id_alias.toString());
          const emoji = getTransportTypeEmoji(transport.transport_type);
          for (const marker of transport.marker) {
            const minutes = Math.round(marker.predict / 60);
            fullResponse += `${emoji} ${route ? route.title : transport.id_alias}: —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω.\n`;
          }
        }
        fullResponse += '\n';
      }
    }

    await ctx.reply(fullResponse);
  } catch (error) {
    console.error('Error fetching forecast:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Search command handler
bot.command('search', async (ctx) => {
  const searchQuery = ctx.message.text.replace('/search', '').trim();
  
  if (!searchQuery) {
    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n' +
      '–ü—Ä–∏–º–µ—Ä: /search –ø–ª–æ—â–∞–¥—å –ª–µ–Ω–∏–Ω–∞'
    );
    return;
  }

  const matchingStops = searchStops(searchQuery);
  const response = formatStopsList(matchingStops, true);
  await ctx.reply(response);
});

// Refresh command handler
bot.command('refresh', async (ctx) => {
  await ctx.reply('–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö –∏ –º–∞—Ä—à—Ä—É—Ç–∞—Ö...');
  stopsCache.clear();
  routesCache.clear();
  await Promise.all([loadAllStops(), loadAllRoutes()]);
  await ctx.reply(
    `–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n` +
    `- –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫: ${allStops.length}\n` +
    `- –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${allRoutes.length}`
  );
});

// Helper function to get transport type emoji
function getTransportTypeEmoji(type: number): string {
  switch (type) {
    case 1:
      return 'üöå'; // Bus
    case 2:
      return 'üöé'; // Trolleybus
    case 3:
      return 'üöä'; // Tram
    case 8:
      return 'üöê'; // Minibus
    default:
      return 'üöç'; // Default transport
  }
}

// Message handler for stop names
bot.on('text', async (ctx) => {
  const stopName = ctx.message.text;

  // Ignore if it looks like a command
  if (stopName.startsWith('/')) {
    return;
  }

  try {
    const matchingStops = searchStops(stopName);

    if (matchingStops.length === 0) {
      await ctx.reply(
        '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n' +
        '–ü–æ–¥—Å–∫–∞–∑–∫–∞: –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n' +
        '- "–ª–µ–Ω–∏–Ω–∞"\n' +
        '- "–ø–ª–æ—â–∞–¥—å –º–∞—Ä–∫—Å–∞"\n' +
        '- "—Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è"\n\n' +
        '–î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search <–Ω–∞–∑–≤–∞–Ω–∏–µ>'
      );
      return;
    }

    if (matchingStops.length > 10) {
      await ctx.reply(
        `–ù–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ (${matchingStops.length}). –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.\n\n` +
        '–ü—Ä–∏–º–µ—Ä—ã:\n' +
        '- –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è\n' +
        '- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã\n' +
        '- –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–π–æ–Ω –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä'
      );
      return;
    }

    if (matchingStops.length > 1) {
      const response = formatStopsList(matchingStops, true);
      await ctx.reply(
        '–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫:\n\n' + 
        response + '\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop <id> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: /stop ' + matchingStops[0].id
      );
      return;
    }

    // If only one stop found, show its forecast
    const stop = matchingStops[0];
    await ctx.reply(`–ù–∞–π–¥–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: ${stop.title} (ID: ${stop.id})`);
    
    // Show forecast
    await ctx.reply(await handleStopForecast(stop));

  } catch (error) {
    console.error('Error fetching data:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Helper function to handle stop forecast
async function handleStopForecast(stop: StopsListResponse['data'][0]): Promise<string> {
  try {
    let response = `üöè ${stop.title} (ID: ${stop.id})\n\n`;
    
    for (const platform of stop.platforms) {
      const forecastResponse = await axios.get<ForecastResponse>(
        `${config.FORECAST_ENDPOINT}/${platform.id}`,
        {
          params: {
            v: '0.5',
            key: config.NSKGORTRANS_API_TOKEN,
            format: 'json'
          }
        }
      );

      if (forecastResponse.data.data && forecastResponse.data.data.length > 0) {
        response += `–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ ${platform.id}:\n`;
        for (const transport of forecastResponse.data.data) {
          const route = allRoutes.find(r => r.id === transport.id_alias.toString());
          const emoji = getTransportTypeEmoji(transport.transport_type);
          for (const marker of transport.marker) {
            const minutes = Math.round(marker.predict / 60);
            response += `${emoji} ${route ? route.title : transport.id_alias}: —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω.\n`;
          }
        }
        response += '\n';
      }
    }

    return response || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ —ç—Ç—É –æ—Å—Ç–∞–Ω–æ–≤–∫—É.';
  } catch (error) {
    console.error('Error in handleStopForecast:', error);
    throw error;
  }
}

// Error handler
bot.catch(async (err: unknown, ctx: Context<Update>) => {
  console.error('Bot error:', err);
  await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// Load data and start the bot
Promise.all([loadAllStops(), loadAllRoutes()])
  .then(() => {
    return bot.launch();
  })
  .then(() => {
    console.log('Bot started successfully');
  })
  .catch((err) => {
    console.error('Error starting bot:', err);
  });

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 